@{

    ViewData["Title"] = "Export Data to CSV";

}



<style>

    :root {
        --primary-color: #C00000;
        --secondary-color: #A00000;
        --accent-color: #E53935;
        --light-color: #f8f9fa;
        --dark-color: #212529;
        --success-color: #4CAF50;
        --warning-color: #FF5252;
        --border-radius: 8px;
        --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }



    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: var(--dark-color);
        background-color: #f5f7fa;
    }



    input[type="checkbox"] {
        appearance: none;
        -webkit-appearance: none;
        width: 18px;
        height: 18px;
        border: 2px solid var(--primary-color);
        border-radius: 4px;
        outline: none;
        cursor: pointer;
        vertical-align: middle;
        position: relative;
        margin-right: 8px;
        transition: var(--transition);
    }



        input[type="checkbox"]:checked {
            background-color: var(--primary-color);
        }



            input[type="checkbox"]:checked::after {
                content: "✓";
                position: absolute;
                color: white;
                font-size: 12px;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }



    button, .btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: var(--border-radius);
        padding: 10px 20px;
        cursor: pointer;
        font-weight: 500;
        transition: var(--transition);
        box-shadow: var(--box-shadow);
    }



        button:hover, .btn:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }



        button:active, .btn:active {
            transform: translateY(0);
        }



    input[type="text"],
    input[type="number"],
    input[type="date"],
    select {
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: var(--border-radius);
        width: 100%;
        transition: var(--transition);
    }



        input[type="text"]:focus,
        input[type="number"]:focus,
        input[type="date"]:focus,
        select:focus {
            border-color: var(--accent-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }



    #filterInputsContainer .filter-field {
        background-color: white;
        padding: 15px;
        border-radius: var(--border-radius);
        margin-bottom: 15px;
        box-shadow: var(--box-shadow);
    }



    #isinSuggestions {
        border-radius: var(--border-radius);
        margin-top: 5px;
        background-color: white;
    }



        #isinSuggestions li {
            padding: 8px 12px;
            border-bottom: 1px solid #eee;
        }



            #isinSuggestions li:hover {
                background-color: var(--light-color);
                cursor: pointer;
            }



    .table-container {
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: auto;
        height: calc(100vh - 200px);
        position: relative;
    }



    table {
        width: max-content;
        min-width: 100%;
        border-collapse: collapse;
    }



    th {
        background-color: var(--primary-color);
        color: white;
        padding: 12px;
        text-align: left;
        position: sticky;
        top: 0;
        z-index: 10;
    }



    td {
        padding: 10px;
        border-bottom: 1px solid #eee;
        white-space: nowrap;
    }



    .table-wrapper {
        position: relative;
        width: 100%;
        height: 100%;
    }



    tr:hover {
        background-color: rgba(72, 149, 239, 0.1);
    }



    .pagination {
        display: flex;
        gap: 5px;
    }



        .pagination button {
            min-width: 36px;
            padding: 6px;
        }



            .pagination button[style*="font-weight: bold"] {
                background-color: var(--secondary-color);
            }



    .alert {
        padding: 12px;
        border-radius: var(--border-radius);
    }



    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }



    #loaderOverlay {
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
    }



    .spinner-border {
        color: var(--accent-color);
    }



    .three-column-layout {
        display: flex;
        gap: 25px;
        min-height: 100vh;
        padding: 25px;
    }



    .filter-column {
        width: 280px;
        background-color: white;
        padding: 20px;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
    }



    .filter-inputs-column {
        width: 380px;
        background-color: white;
        padding: 20px;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
    }



    .table-column {
        flex: 1;
        min-width: 0;
    }



    .data-notice {
        background-color: #e2f0fd;
        padding: 10px 15px;
        border-radius: var(--border-radius);
        margin-bottom: 15px;
        font-size: 0.9em;
        color: var(--dark-color);
        border-left: 4px solid var(--accent-color);
    }

</style>



@if (TempData["Error"] != null)

{

    <div class="alert alert-danger">@TempData["Error"]</div>

}



<div class="three-column-layout">

    <!-- Column 1: Filter Checkboxes -->

    <div class="filter-column">

        <h2 style="color: var(--primary-color); margin-bottom: 20px;">Export to CSV</h2>

        <h4 style="color: var(--secondary-color); margin-bottom: 15px;">Available Filters</h4>

        @{

            var fields = new[] {

        "DatTraitement", "DateEffet", "CodSens", "Qte", "Crs", "MntBrutDevNegociation", "NumCompte", "CodSociete",

        "CodAssiste", "NomAbrege", "TypGestion", "CodIsin", "LibValeur", "CodOperation", "CodMarche",

        "CodAnnulation", "Nom", "AdrVille",

        "CodGerant", "CategorisationMIFID", "LieuNegociation"

        };

        }

        <div style="max-height: calc(100vh - 200px); overflow-y: auto;">

            @foreach (var field in fields)

            {

                <div style="margin-bottom: 10px; display: flex; align-items: center;">

                    <input type="checkbox" id="chk_@field" name="filters" onclick="toggleFilter('@field')"
                    @((!string.IsNullOrEmpty(ViewBag.FormData?[field]?.ToString()) ? "checked" : "")) />

                    <label for="chk_@field" style="cursor: pointer; user-select: none;">@field</label>

                </div>

            }

        </div>

    </div>



    <!-- Column 2: Filter Input Fields -->

    <div class="filter-inputs-column">

        <form asp-action="ShowData" method="post" onsubmit="return validateFilters()" id="dataForm">

            <input type="hidden" name="page" value="@ViewBag.CurrentPage" />



            <!-- Buttons at the TOP of the filter inputs -->

            <div style="display: flex; gap: 10px; margin-bottom: 20px;">

                <button type="submit" class="btn">

                    <i class="fas fa-eye"></i> Show Data

                </button>

                <button type="submit" formaction="/export/Export" class="btn" style="background-color: var(--success-color);">

                    <i class="fas fa-file-export"></i> Export CSV

                </button>

            </div>

            <div id="filterError" class="alert alert-danger" style="display:none; margin-bottom: 15px;"></div>



            <!-- Filter inputs will appear below buttons -->

            <div id="filterInputsContainer" style="max-height: calc(100vh - 250px); overflow-y: auto;">

                <!-- Date Ranges -->

                <div id="DatTraitement" class="filter-field" style="display:none;">

                    <label style="font-weight: 600; color: var(--secondary-color); margin-bottom: 8px; display: block;">DatTraitement</label>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">

                        <div>

                            <label style="display: block; margin-bottom: 5px; font-size: 0.9em;">From</label>

                            <input type="date" name="DatTraitementStart" value="@(ViewBag.FormData?["DatTraitementStart"] ?? "")" />

                        </div>

                        <div>

                            <label style="display: block; margin-bottom: 5px; font-size: 0.9em;">To</label>

                            <input type="date" name="DatTraitementEnd" value="@(ViewBag.FormData?["DatTraitementEnd"] ?? "")" />

                        </div>

                    </div>

                </div>



                <div id="DateEffet" class="filter-field" style="display:none;">

                    <label style="font-weight: 600; color: var(--secondary-color); margin-bottom: 8px; display: block;">DateEffet</label>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">

                        <div>

                            <label style="display: block; margin-bottom: 5px; font-size: 0.9em;">From</label>

                            <input type="date" name="DateEffetStart" value="@(ViewBag.FormData?["DateEffetStart"] ?? "")" />

                        </div>

                        <div>

                            <label style="display: block; margin-bottom: 5px; font-size: 0.9em;">To</label>

                            <input type="date" name="DateEffetEnd" value="@(ViewBag.FormData?["DateEffetEnd"] ?? "")" />

                        </div>

                    </div>

                </div>



                <!-- CodIsin Autocomplete -->

                <div id="CodIsin" class="filter-field" style="display:none;">

                    <label style="font-weight: 600; color: var(--secondary-color); margin-bottom: 8px; display: block;">CodIsin (Search)</label>

                    <input type="text" id="codIsinInput" name="CodIsin" oninput="fetchCodIsin()" autocomplete="off" placeholder="Start typing to search..." value="@(ViewBag.FormData?["CodIsin"] ?? "")" />

                    <ul id="isinSuggestions"></ul>

                </div>



                <!-- Other Filters -->
                @{

                    string[] numberFields = { "Qte", "Crs", "MntBrutDevNegociation" };

                    foreach (var field in fields)

                    {

                        if (field == "DatTraitement" || field == "DateEffet" || field == "CodIsin") continue;

                        <div id="@field" class="filter-field" style="display:none;">

                            <label style="font-weight: 600; color: var(--secondary-color); margin-bottom: 8px; display: block;">@field</label>

                            <input type="@(numberFields.Contains(field) ? "number" : "text")" name="@field" value="@(ViewBag.FormData?[field] ?? "")" />

                        </div>

                    }

                }

            </div>

        </form>

    </div>



    <!-- Column 3: Table and Pagination -->

    <div class="table-column">

        <!-- Pagination -->

        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">

            <div class="data-notice">

                <i class="fas fa-info-circle"></i> Note: This table displays only the first 1000 rows of matching data

            </div>

            <div class="pagination">

                <span style="margin-right: 10px;">Page:</span>

                @if (ViewBag.TotalPages != null && ViewBag.CurrentPage != null)

                {

                    for (int i = 1; i <= (int)ViewBag.TotalPages; i++)

                    {

                        var isActive = (i == (int)ViewBag.CurrentPage) ? "font-weight: bold; text-decoration: underline;" : "";

                        <form method="post" asp-action="ShowData" style="display:inline;">

                            <input type="hidden" name="page" value="@i" />

                            @foreach (var key in ViewBag.FormData?.Keys ?? new string[0])

                            {

                                <input type="hidden" name="@key" value="@ViewBag.FormData[key]" />

                            }

                            <button type="submit" class="btn" style="@isActive padding: 6px 10px; min-width: 36px;">@i</button>

                        </form>

                    }

                }

            </div>

        </div>



        <!-- Table -->

        <div class="table-container">

            @if (ViewBag.PageData == null || ((List<List<string>>)ViewBag.PageData).Count == 0)

            {

                <div style="display: flex; justify-content: center; align-items: center; height: 300px; background: white; border-radius: var(--border-radius);">

                    <div style="text-align: center; color: #666;">

                        <i class="fas fa-database" style="font-size: 2em; color: #ccc; margin-bottom: 15px;"></i>

                        <div style="font-size: 1.2em; margin-bottom: 10px;">No data to display</div>

                        <div>Please select filters and click "Show Data"</div>

                    </div>

                </div>

            }

            else

            {

                <div class="table-wrapper">

                    <table>

                        <thead>

                            <tr>

                                @foreach (var col in ViewBag.Columns as List<string>)

                                {

                                    <th>@col</th>

                                }

                            </tr>

                        </thead>

                        <tbody>

                            @foreach (var row in ViewBag.PageData as List<List<string>>)

                            {

                                <tr>

                                    @foreach (var cell in row)

                                    {

                                        <td>@cell</td>

                                    }

                                </tr>

                            }

                        </tbody>

                    </table>

                </div>

            }

        </div>

    </div>

    <!-- Loader Overlay -->

    <div id="loaderOverlay" style="display:none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 9999; display: flex; justify-content: center; align-items: center;">

        <div style="text-align: center; color: white; width: 80%; max-width: 500px;">

            <div class="spinner-border" role="status" style="width: 3rem; height: 3rem; color: #4895ef;"></div>

            <h3 style="margin-top: 20px;">Processing your request</h3>

            <p style="color: rgba(255,255,255,0.8);">This may take several minutes...</p>



            <!-- Progress Bar Container -->

            <div style="margin-top: 20px; width: 100%;">

                <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">

                    <span id="progressStatus">Starting...</span>

                    <span id="progressPercent">0%</span>

                </div>

                <div style="width: 100%; height: 10px; background-color: rgba(255,255,255,0.2); border-radius: 5px; overflow: hidden;">

                    <div id="progressBar" style="height: 100%; width: 0%; background-color: var(--accent-color); transition: width 0.3s ease;"></div>

                </div>

            </div>

        </div>

    </div>

    <!-- Font Awesome for icons -->

    <link rel="stylesheet" href=https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css>



    <!-- JavaScript -->

    <script>

        function toggleFilter(id, forceShow = false) {

            const container = document.getElementById(id);

            const checkbox = document.getElementById("chk_" + id);



            if (checkbox.checked || forceShow) {

                container.style.display = 'block';

            } else {

                container.style.display = 'none';

                if (!forceShow) {

                    clearFilterInputs(container);

                }

            }

        }



        function clearFilterInputs(container) {

            const inputs = container.querySelectorAll("input");

            inputs.forEach(input => {

                if (input.type !== 'hidden') input.value = "";

            });

            const suggestions = container.querySelector("ul");

            if (suggestions) suggestions.innerHTML = "";

        }



        function initializeFilters() {

            document.querySelectorAll("input[type='checkbox'][id^='chk_']").forEach(cb => {

                if (cb.checked) toggleFilter(cb.id.replace("chk_", ""), true);

                cb.addEventListener('change', function() {

                    toggleFilter(this.id.replace("chk_", ""));

                });

            });

        }



        function validateFilters() {

            const checkboxes = document.querySelectorAll("input[type='checkbox'][id^='chk_']:checked");

            if (checkboxes.length === 0) {

                showFilterError("Please select at least one filter before submitting.");

                return false;

            }



            let hasFilterValue = false;

            document.querySelectorAll(".filter-field").forEach(filterDiv => {

                if (filterDiv.style.display !== 'none') {

                    const inputs = filterDiv.querySelectorAll("input[type='text'], input[type='number'], input[type='date']");

                    inputs.forEach(input => {

                        if (input.value.trim() !== "") hasFilterValue = true;

                    });

                }

            });



            if (!hasFilterValue) {

                showFilterError("Please fill in at least one filter field before submitting.");

                return false;

            }



            storeVisibleFilters();

            return true;

        }



        function showFilterError(message) {

            const errorBox = document.getElementById("filterError");

            errorBox.textContent = message;

            errorBox.style.display = "block";

            setTimeout(() => errorBox.style.display = "none", 5000);

        }



        function storeVisibleFilters() {

            const visibleFilters = [];

            document.querySelectorAll('.filter-field').forEach(filter => {

                if (filter.style.display !== 'none') visibleFilters.push(filter.id);

            });

            sessionStorage.setItem('visibleFilters', JSON.stringify(visibleFilters));

        }



        function restoreVisibleFilters() {

            const visibleFilters = JSON.parse(sessionStorage.getItem('visibleFilters') || '[]');

            visibleFilters.forEach(filterId => {

                const checkbox = document.getElementById('chk_' + filterId);

                if (checkbox) {

                    checkbox.checked = true;

                    toggleFilter(filterId, true);

                }

            });

            sessionStorage.removeItem('visibleFilters');

        }



               function setupFormHandlers() {
            document.getElementById("loaderOverlay").style.display = "none";

            const form = document.getElementById('dataForm');
            form.addEventListener('submit', function(e) {
                if (validateFilters()) {
                    showLoader();
                    startProgressTracking(); // 👈 ensure progress always starts here
                } else {
                    e.preventDefault(); // only block submit if validation fails
                }
            });
        }


        let progressInterval;

        let progressCheckCount = 0;

        const maxProgressChecks = 60;



        function startProgressTracking() {

            progressCheckCount = 0;

            updateProgress(0, "Starting export process...");



            progressInterval = setInterval(checkProgress, 5000);

        }



        function checkProgress() {

            progressCheckCount++;



            if (progressCheckCount > maxProgressChecks) {

                clearInterval(progressInterval);

                updateProgress(100, "Process timed out - please check back later");

                return;

            }



            fetch('/export/GetProgress')

                .then(response => response.json())

                .then(data => {

                    if (data.progress >= 100) {

                        clearInterval(progressInterval);

                        updateProgress(100, "Completed!");

                        setTimeout(() => {

                            document.getElementById("loaderOverlay").style.display = "none";

                        }, 1000);

                    } else {

                        updateProgress(data.progress, data.message || "Processing...");

                    }

                })

                .catch(error => {

                    console.error("Error checking progress:", error);

                    updateProgress(0, "Error checking progress - please wait...");

                });

        }



        function updateProgress(percent, message) {

            const progressBar = document.getElementById("progressBar");

            const progressPercent = document.getElementById("progressPercent");

            const progressStatus = document.getElementById("progressStatus");



            progressBar.style.width = `${percent}%`;

            progressPercent.textContent = `${percent}%`;

            progressStatus.textContent = message;



            if (percent < 30) {

                progressBar.style.backgroundColor = "#FF5252";

            } else if (percent < 70) {

                progressBar.style.backgroundColor = "#FFC107";

            } else {

                progressBar.style.backgroundColor = "#4CAF50";

            }

        }



        function showLoader() {

            const loader = document.getElementById("loaderOverlay");

            loader.style.position = "fixed";

            loader.style.top = "0";

            loader.style.left = "0";

            loader.style.width = "100%";

            loader.style.height = "100%";

            loader.style.display = "flex";

            loader.style.justifyContent = "center";

            loader.style.alignItems = "center";

            loader.style.zIndex = "9999";

            loader.style.backgroundColor = "rgba(0,0,0,0.7)";

            loader.style.color = "white";






            window.addEventListener('load', function() {

                clearInterval(progressInterval);

                document.getElementById("loaderOverlay").style.display = "none";

            });



            const exportButton = document.querySelector('button[formaction*="Export"]');

            if (exportButton && document.activeElement === exportButton) {

                const interval = setInterval(() => {

                    if (document.cookie.includes("exportFinished=true")) {

                        clearInterval(interval);

                        clearInterval(progressInterval);

                        document.getElementById("loaderOverlay").style.display = "none";

                        document.cookie = "exportFinished=;expires=Thu, 01 Jan 1970 00:00:01 GMT;";

                    }

                }, 1000);

            }

        }



        function setupCodIsinAutocomplete() {

            const codIsinInput = document.getElementById("codIsinInput");

            if (codIsinInput) codIsinInput.addEventListener("input", fetchCodIsin);

        }



        function fetchCodIsin() {

            const term = document.getElementById("codIsinInput").value;

            const suggestions = document.getElementById("isinSuggestions");

            suggestions.innerHTML = "";



            if (term.length === 0) return;



            fetch(`/export/SearchCodIsin?term=${encodeURIComponent(term)}`)

                .then(response => response.json())

                .then(data => {

                    data.forEach(item => {

                        const li = document.createElement("li");

                        li.textContent = item;

                        li.style.padding = "8px 12px";

                        li.style.borderBottom = "1px solid #eee";

                        li.style.transition = "background-color 0.2s";

                        li.addEventListener("mouseenter", () => li.style.backgroundColor = "#f8f9fa");

                        li.addEventListener("mouseleave", () => li.style.backgroundColor = "");

                        li.addEventListener("click", () => {

                            document.getElementById("codIsinInput").value = item;

                            suggestions.innerHTML = "";

                        });

                        suggestions.appendChild(li);

                    });

                });

        }

                function autoCopyDate(fromName, toName) {
            const fromInput = document.querySelector(`input[name='${fromName}']`);
            const toInput = document.querySelector(`input[name='${toName}']`);

            if (fromInput && toInput) {
                toInput.addEventListener('focus', function () {
                    if (!toInput.value) {
                        toInput.value = fromInput.value;
                    }
                });
            }
        }

        document.addEventListener("DOMContentLoaded", function() {

            document.getElementById("loaderOverlay").style.display = "none";



            initializeFilters();

            setupFormHandlers();

            setupCodIsinAutocomplete();

            restoreVisibleFilters();
                autoCopyDate("DatTraitementStart", "DatTraitementEnd");
        autoCopyDate("DateEffetStart", "DateEffetEnd");

        });


    </script>
